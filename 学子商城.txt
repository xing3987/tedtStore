
学子商城总需求：
	1.用户管理
		1.1	注册
		1.2	登陆
		1.3	修改个人信息：基本信息，密码
	2.地址管理
		2.1	添加地址
		2.2	显示收货地址
		2.3	修改地址
		2.4	删除地址
		2.5	设置默认地址
	3.商品
		3.1	商品分类
		3.2	热门商品
		3.3	展示商品页
		3.4	商品详情
	4.购物车
		4.1	添加购物车
		4.2	显示购物车
		4.3	修改购物车信息：修改数量，删除商品
	5.订单
		5.1	生成订单
		5.2	付款（存储过程）

分析：从页面--数据库
写代码：从持久层-业务层-控制器层-页面		
			 

ssm-学子商城
	1.建立项目，配置环境
	2.创建文件夹结构
		实体：bean
		控制器：controller(在spring-mvc.xml中添加组件扫描)
		业务层：service(在spring-service.xml中添加服务层扫描)
		持久层:mapper(在spirng-dao.xml中添加接口扫描和映射文件扫描)
	3.导包
		spring-webmvc
		spring-jdbc
		mybatis
		mybatis-spring
		mysql
		commons-dbcp
		junit
		jaskson*3(异步ajax)
		jstl
	4.添加资源文件
		resources中添加属性文件	db.properties	spring-mvc.xml
		在resources中创建文件夹：mappers用于管理映射文件	
	5.配置web.xml添加dispatcherServlet, filter编码
		
***用户管理****
	1.表设计
		id   		int 				auto_increment primary key;
		username 	varchar(50)			not null unique
		password	varchar(50)			not null
		email		varchar(50)			not null
		phone		varchar(32)			not null
		image		varchar(100)						
		gender		int					0表示男,1表示女
		created_user varchar(50)
		created_time date
		modified_user varchar(50)
		modified_time date
		
	2.注册
		--创建实体类：在bean包中创建user,增加表对应字段并增加构造方法等
		--持久层：
			a.在mapper包定义接口：接口UserMap接口，并且在接口中定义insert方法
			b.在mappers文件夹中创建UserMapper.xml指定namespace
				在其中写插入语句，查询语句
			c.写测试类，测试插入，查询语句的正确性(test.java)
		--业务层
			a.创建接口IUserService,在接口中定义业务方法：register方法
				public interface IUserService{
					void register(User user);
				}
			b.创建IUserService接口的实现类：UserService，实现接口中的方法	
			c.在service.ex包中创建ClassNameAlreadyExistException异常继承RuntimeException
			d.测试UserService是否正确(test.java)
			
		--用户注册,用户名，邮箱，电话号码,用户名的验证
			a.邮箱持久层，在UserMapper接口中定义方法：验证邮箱是否存在。
				Integer selectByEmail(String email);
			b.在UserMapper.xml中定义select节点，根据邮箱查询是否存在
				返回数据类型为 java.lang.Integer
	
	3.定义通用的响应结束类ResponseResult定义到bean包中(实现序列化接口)
		包含状态码，返回信息提示，返回数据
				
	4.控制器的5个请求方法
		a.	/user/showRegister.do--显示页面
			请求参数：无
			请求方式：get
			响应方式：转发	
		b.	/user/checkUsername.do--异步请求确认用户名
			请求参数：username
			请求方式：get
			响应方式：ResponseBody
		c.	/user/checkEmail.do--异步请求确认邮箱
			请求参数：email
			请求方式：get
			响应方式：ResponseBody
		d.	/user/checkPhone.do--异步请求确认电话	
			请求参数：phone
			请求方式：get
			响应方式：ResponseBody
		e.	/user/register.do--确认登陆跳转
			请求参数：form数据
			请求方式：post
			响应方式：ResponseBody(状态码为1时通过location进行页面跳转)
		
	5.在register.jsp页面中实现用户，邮箱，手机号的异步提交(ajax)	
	
	6.用户注册，提交按钮的控制器方法(异步提交)
			register.jsp页面中该提交方法ajax的书写
			
   	**用户登陆**
   	1.登陆-持久层
   	2.登陆-业务层
   		在UserService类中实现login方法
   			a.调用持久层selectByUsername()方法，返回值User
   			b.判断user对象是否为null
   			c.如果为null,抛出异常UserNotFoundException(创建该异常)
   			d.如果不为null,从user对象中取出password,用password和页面输入的password比较
   			e.如果是true,state=1,message=登陆成功，返回user
   			f.如果是false,抛出异常PasswordNotMatchException(创建密码不匹配异常)
	3.登陆-控制层
		在UsreController类中定义方法
			a.跳转到登陆页面
			b.点击登陆时跳转到主页并绑定session
			c.验证用户名（ajax）
		在login.jsp中写登陆和验证用户名的ajax代码	
			写点击记住密码保存cookie的函数
		
	4.页面调整
		注册成功之后，跳转到登陆
		在注册的页面，点击直接登陆，跳转到登陆页面

**首页管理**
	1.登陆成功跳转到首页
	2.在index.jsp页面，显示用户名，在右上角	
		${user.username}	
	3.如果没有显示用户名，显示登陆，如果显示用户名，显示退出	
		引入标签库
		<c:if test="${user!=null}">退出</c:if>	
	4.点击登陆，跳转到登陆页面	
	5.点击退出，退出到首页，清除session
		在UserController,定义方法，完成退出的功能
		public String exit(HttpSession session){
			session.invalidate();
			return "../main/showIndex.do";
		}
	6.截取header.jsp，在index.jsp页面动态包含header.jsp
	7.点击用户名时，显示用户信息管理页面：	personal_password
		在UserController中定义方法，方法名showPersonal.do
		
***安全管理***		
		1.持久层
			a.在UserMapping接口中定义方法
					修改用户信息：void update(User user)
				在UserMapper.xml文件中，定义update节点，并写sql语句
				<update id="update" parameterType="....User">
					update t_user set 
						<if test="password!=null">
							password=#{password},
						</if>
						<if test="username!=null">
							username=#{username},
						</if>
						<if test="gender!=null">
							gender=#{gender},
						</if>
						<if test="email!=null">
							email=#{email},
						</if>
						<if test="phone!=null">
							phone=#{phone},
						</if>
						modified_user=#{modifiedUser},
						modified_time=#{modifiedTime} 
					 where id=#{id}
				</update>
				测试：修改密码成功
			b.创建方法User selectById()	
				在UserMapper.xml文件中，定义selectById方法
		
		2.业务层
			在IUserService接口中定义方法
				void changePassword(Integer id,String oldPwd,String newPwd)
			在UserService类中实现方法
				void changePassword(Integer id,String oldPwd,String newPwd){
					1.调用selectById得到用户
					2.判断user!=null，获取密码
					3.获取密码和oldPwd进行判断
					4.如果结果返回true
						User u=new User
						u.setId(..);u.setPassword()
					5.调用持久层update(u)
					6.返回false抛异常
				}
					
		3.控制器层
			在MainController中定于方法
				public ResponseResult<Void> password
			书写跳转到personInfo.jsp的代码
		4.  在personal_password.jsp中用jQuery写验证密码，点击提交的ajax语句
			调整各个按钮的连接地址及左边下拉列表的显示
		5.  在personInfo.jsp中调整页面以及各个连接
		
		6. 个人信息-修改
			a.持久层
			b.业务层			
				在IUserService定义方法
					void update(Integer id,String username,Integer gender,String phone,String email);
				在UserService中实现方法
				void update(Integer id,String username,Integer gender,String phone,String email){
					User user=new User();
					判断username是否存在
					User u1=userMapper.selectByUsername(username);
					如果u1==null||username.equals(u1.getUsername)//用户名为空或者是当前用户
						user.setUsername(username);
					否则
							抛出用户名已经存在的异常					
				}
			c.控制层
				UserController中添加public ResponseResult<Void> personInfo(HttpSession session, 
							String username,Integer gender,String phone,String email)方法
							
							方法中注意重新session绑定user
			
			d.处理页面personInfo.jsp保存更改的功能
		
		
***登陆拦截器**
		Filter:web组件，web容器	过滤web组件---jsp,servlet等
		Interceptor:spring组件  拦截controller---从前端到controller，从后端到前端时执行
		1.	拦截：showPersonInfo.do
					personInfo.do
					showPersonal.do
					personal.do
		2.	在store中创建拦截器的包intercept
				创建拦截器的类LoginInterceptor
				public class LoginInterceptor implements HandlerInterceptor{}	
					在perHandler方法中写：
						1.判断session user是否为null
						2.如果为null,重定向到登陆界面
						3.如果不为null,继续执行controller方法	
		3. 在spring-mvc.xml中配置拦截器
		
**地址管理******
		创建表t_address,省市区存对应编号
		create table t_address(
			id int auto_increment primary key,
			uid int not null,
			recv_name varchar(50) not null,
			recv_province varchar(6),
			recv_city varchar(6) not null,
			recv_area varchar(6) not null,
			recv_distric varchar(100) not null,
			recv_address varchar(100) not null,
			recv_phone varchar(32) not null,
			recv_tel varchar(32),
			recv_zip varchar(6),
			recv_tag varchar(10),
			created_user varchar(50),
			created_time date,
			modified_user varchar(50),
			modified_time date
		)engine=InnoDB default charset=utf8
		
		1.添加地址，新建地址管理控制器：AddressController
			a.显示页面并修改成.jsp格式，替换头部和左边栏
			b.制作地址三级联动菜单
				1.导入全国地址表t_dict.sql
				
				2-1.持久层
					1.创建Province实体类
						参照表的字段驼峰式创建bean
					2.创建DectMapper接口，定义方法selectProvince;
							List<Province> selectProvince();
					3.新建DictMapper.xml用于保存省信息查询等功能
						写查询语句
					4.测试持久层
				2-2.业务层	
					创建接口IDictService,并定义方法
						List<Province> getProvince();
					创建接口的实现类:DictService,实现方法
						public List<Province> getProvince(){}
				2-3.控制器层("/dict")
					创建控制器类：DictController
						创建方法：
							public ResponseResult<List<Province>> showProvince(){
								List<Province> provinces=dictService.getProvince();
							}
				2-4.表示层写ajax异步提交代码
						//显示城市信息
						function getCity(provinceCode){
							$.ajax({
								"url":"${pageContext.request.contextPath}/dict/showCity.do",
								"data":"provinceCode="+provinceCode,
								"type":"GET",
								"dataType":"json",
								"success":function(obj){
									var cityNames=obj.data;
									$("#receiverCity").html("<option>&nbsp;&nbsp;- - - 选择市 - - -&nbsp;&nbsp;</option>");
									for(var i=0;i<cityNames.length;i++){
										$("#receiverCity").append("<option value='"+cityNames[i].cityCode+"'>"+cityNames[i].cityName+"</option>");
									}
								}
							});
						}
						//显示省列表信息
						$(function(){		
							$.ajax({
								"url":"${pageContext.request.contextPath}/dict/showProvince.do",
								"type":"GET",
								"dataType":"json",
								"success":function(obj){
									var provinceNames=obj.data;
									for(var i=0;i<provinceNames.length;i++){
										$("#receiverState").append("<option value='"+provinceNames[i].provinceCode+"'>"+provinceNames[i].provinceName+"</option>");
									}
								}
							});
						});
				3.写城市和区域的代码（参照省份）		
					1.创建City实体类
					2.在DectMapper接口中定义方法selectCity
					3.在配置DectMapper.xml中定义查询语句
					4.测试持久层
					5.在页面jsp文件上写ajax异步提交代码
				
				4.省市区函数调整
					getProvince(provinceCode,cityCode,areaCode)
					getCity(provinceCode,cityCode,areaCode)
					getArea(cityCode,areaCode)
					
					如：getProvince(-1,-1,-1)
				5.创建方法，通过code查询省份，城市，区域
					selectProvinceNameByCode
					selectCityNameByCode
					selectAreaNameByCode
					在DectMapper中配置查询语句
					
			c.添加地址点击提交按钮
				1.	在bean包创建表对应的bena--Address.java
				2.	在mapper包中创建AddressMapper接口，在接口中定义方法：
						void insert(Address address);
				3.	新建AddressMapper.xml文件
				4.	定义insert节点，完成插入地址信息的功能 
				
			d.添加收货地址
				1.持久层
					增加通过uid查询Address方法
				2.业务层
					1.在service包中，新建IAddressService,定义方法
						void addAddress(Address address);
							
					2.新建AddressService实现类，实现以上方法
						public void addAddress(Address address){}
				
					3.从address中获取省市区的code,调用dictMapper中提供的方法，
					     获取到code对应的name,再把3个name 用+连接成新串，把此字符串
					    设置到address中
					    address.setDistrict();
					4.给isDefault设置值
						调用selectByUid方法，该方法返回list
						如果list.size()>0,address的isDefault
				
				3.控制层
					在AddressController定义方法
						public ResponseResult<Void> address(HttpSession session,
						@RequestParam("receiverName") String recvName,
						@RequestParan("receiverState) String recvProvince,
						@RequestParam("receiverCity") String recvCity,
						@RequestParam("receiverDistrict") String recvArea,
						@RequestParam("receiverAddress") String recvAddress,
						@RequestParam("receiverMobile") String recvPhone,
						@RequestParam("receiverPhone") String recvTel,
						@RequestParam("receiverZip") String recvZip,
						@RequestParam("addressName") String recvTag){
							1.创建rr对象
							2.调用业务层方法
							3.设置rr的状态码和信息
							4.return rr;
						}
			
		2.显示地址
			1.在IAddressService接口中，定义方法
				List<Address> getAddressByUid(Integer uid){}
			2.在AddressService类中实现方法
				public List<Address> getAddressByUid(Integer uid){}
			3.控制层public ResponseResult<List<Address>> getAddressByUid(HttpSession session){}	
			4.jsp页面显示收货人信息，通过ajax把从控制层得到的json串转换成页面
		
		3.显示地址设置默认
			1.在AddressMapper接口定义2个方法：
				Integer setCancel(Integer uid)//把登陆用户所有的default_address设置为0
				Integer setDefault(Integer id)//把选中的用户的default_address设置为1
			2.在AddressMapper.xml文件中定义这两个方法
				update t_address set default_address=0 where uid=#{uid}
				update t_address set default_address=1 where id=#{id}	
			     在IAddressService接口中定义方法
			     	void setDefault(Integer uid,Integer id);
			   在AddressService类中实现方法
			   	public void setDefault(Integer uid,Integer id){
			   		1.调用持久层方法setCancel(),如果方法返回0，抛出异常
			   		2.调用持久层方法setDefault(),如果方法返回0,抛出异常
			   	}
			3.在控制层定义方法	
				public ResponseResult<Void> getDefault(HttpSession session,Integer id){}
			4.定义页面的ajax函数	
		4.修改收货地址
			1.回显收货地址
				a.持久层				
					在AddressMapper接口中定义方法：
						Address selectAddressById(Integer id)
					在AddressMapper.xml中，定义select节点
				b.业务层
					在IAddressService接口中定义方法
						Address getAddressById(Integer id);
					在AddressService中实现该方法
				c.控制器层
					public ResponseResult<Address> getAddressById(Integer id) {}
				d.页面按钮添加事件，用ajax访问控制器
					修改三级联动的代码，增加参数传递
					最后在表单中添加一个隐藏的input里面放入id值
			2.点击修改
				a.持久层
					在AddressMapper接口中定义方法
						void updateById(Address address);
					在AddressMapper.xml中，定义update节点
				b.测试sql语句的正确性
				c.服务层
					在IAddressService实现方法
						public void updateAddressById(Address address)
					在AddressService中实现该方法
						注意recvDistrict地址的拼接
				d.控制器
					/address/updateAddress.do
					请求参数：form数据
					请求方式：POST
					响应方式:ResponseBody成功信息
						public ResponseResult<Void> updateAddress(
						Integer id,
						@RequestParam("receiverName") String recvName,
						@RequestParan("receiverState) String recvProvince,
						@RequestParam("receiverCity") String recvCity,
						@RequestParam("receiverDistrict") String recvArea,
						@RequestParam("receiverAddress") String recvAddress,
						@RequestParam("receiverMobile") String recvPhone,
						@RequestParam("receiverPhone") String recvTel,
						@RequestParam("receiverZip") String recvZip,
						@RequestParam("addressName") String recvTag){
							1.创建rr对象
							2.调用业务层方法
							3.设置rr的状态码和信息
							4.return rr;
						}	
				e.编写页面jsp的ajax代码				
					修改成功后，按钮要改回‘保存联系人信息’
		5.点击删除按钮
			a.在AddressMapper接口定义方法
				void deleteById(Integer id);
			b.在AddressMapper.xml中添加删除语句
			c.编写控制层，服务层;
						
*********商品管理*********
	1.showIndex.do主界面显示商品分类信息
		1.持久层：
			a.首先新建GoodsCategory实体类；定义接口GoodsCategoryMapper,在接口中定义方法
				//分页查询，子类商品，因为参数有多个可以使用两种方法
					1.封装成一个类，当一个参数传递
					2.使用@Param注解进行封装传递
				List<GoodsCategory> selectByParentId(@Param("parentId") Integer parendId,
						@Param("offset") Integer offset,@Param("count") Integer count);					
			b.新建GoodsCategoryMapper.xml;配置映射名称，写查询语句。			
				<select id="selectCategoryByParentId" resultType=" ">
					select xx from t_goods_category 
					where parent_id=#{parentId}
					and status=1	//上架状态
					<if test="offset!=null">//如果有分页查询参数传递时
						limit #{offset},#{count}
					</if>
				</select>	
			c.测试持久层		
		2.业务层
			a.新建IGoodsCategoryService接口，在接口中定义方法
				List<GoodsCategory> getCategoryByParentId(Integer parentId,
					Integer offset,Integer count);
			b.新建接口实现类GoodsCategoryServic,实现接口的方法
		3.控制层
			使用MainController类中的showIndex(ModelMap map)方法
			a.调用getCategoryByParentId(161,0,3),返回二级分类集合computerList
			b.遍历二级分类集合，得到二级分类的对象，从对象中得到id,
				调用getCategoryByParentId(id,null,null),返回三级分类集合category161List
			c.方法添加ModelMap(spring-mvc用来传递request)参数
				把两个集合分别设置到map中
		4.页面
			--index.jsp在电脑.办公/1F中把得到的数据用el表达式,forEach标签放入两个List中的数据

	2.热门商品的显示
		1.持久层
			a.新建Goods实体类对应数据库表：t_goods
			b.新建GoodsMapper接口，在接口中定义方法(分页查询显示3个热点商品)
				List<Goods> select(@Param("categoryId") Integer categoryId,
					@Param("offset") Integer offset,@Param("count") Integer count)
			c.新建GoodsMapper.xml，添加查询方法
				select * from t_goods where category_id=#{categoryId}
									  add num>0 and status=1
									  order by priority desc 
									  limit #{offset},#{count}
		2.业务层IGoodsService接口，GoodsService实现类
			写对应的方法
		3.控制层
			参照商品分类信息控制层(写在showIndex(Model map)中)	
		4.页面
			注意forEach标签的使用和多重嵌套varstatu--index的使用
			
	3.商品展示页面search.jsp
		1.新建GoodsController类，定义showSearch方法，完成显示页面
			给index.jsp增加三级超连接: ../goods/showSearch.do?categoryId=${computer.id}
			调整	showSearch方法增加参数Integer categoryId,ModelMap map
		2.持久层（同热门商品展示（复用））
		3.业务层	（同热门商品展示（复用））
		4.调整页面search.jsp		
		5.添加分页查询
			a.	<div style="height:20px" align="right">
					共28个商品，共4页|1  2  3  4  
				</div>
			b.在GoodsMapper接口中定义方法
				Integer selectCount(Integer categoryId);
			c.在GoodsMapper.xml文件中，定义select节点，完成查询的功能
				<select id="selectCount" resultType="java.lang.Integer">
					select count(*) from t_goods where categoryId=#{categoryId}
				</select>
			d.测试持久层，业务层
			e.控制层添加计数和页面的数量
				showSearch方法中
			f.调整页面,建立点击的超连接
				<div style="height:25px;font-size:25px;margin-bottom: 30px" align="center">
						共${count}个商品，共${pages}页|
					<c:forEach var="i" begin="1" end="${pages}">
						<a href="../goods/showSearch.do?categoryId=${categoryId}&page=${i}">${i}</a>
					</c:forEach>
				</div>
	4.商品详细信息页面product_details.jsp
		1.持久层(虽然id是String类型,但由于内容都是数值，也可以用Integer类型替代)
			在GoodsMapper接口中定义方法
				Goods selectByGoodsId(Integer id);
			在GoodsMapper.xml编写select语句
				<select id="selectByGoodsId" resultType="...Goods"
					select * from t_goods where id=#{id}
				</select>
		2.业务层
			Goods getGoodsById(Integer id);
		3.在GoodsService类中实现方法，返回商品
		4.控制器层
			/goods/goodsProduct.do
			请求参数：goodsId，categoryId
			请求方式：get
			响应方式：转发
			public String goodsProduct(Integer goodsId,Integer categoryId)	
		5.在search.jsp中调整页面连接
			"../goods/showProduct.do?id="+id+"&categoryId="+categoryId
		     在index.jsp中调整页面连接	
		     <a href="${pageContext.request.contextPath}/goods/showProduct.do?
		     	id=${goods2.id}&categoryId=${goods2.categoryId}">查看详情</a>
		      实现热门商品显示(4个)
		            在showProduct中添加查询热门商品并把结果集合保存到map中
		             调整product_details.jsp中调整页面
		             
		             
*******购物车*****
*A*添加购物车
	1.设计表  t_cart
		id
		uid
		goods_id
		count 
	2.持久层
		新建CartMapper接口，在接口中定义方法
			void insertCart(Cart cart)	
		新建CartMapper.xml
			<insert id="insertCart" parameterType="">
				insert into t_cart values(null,
					#{uid},#{goodId},#{count},#{createdUser},#{createdTime},
					#{modifiedUser},#{modifiedTime})
			</insert>
	3.业务层
		建立ICartService接口和对应的实现类
		添加插入的方法
	4.控制器层
		/cart/addCart.do
		请求参数：uid(session),goodsId,count
		请求方式：get
		响应方式：ResponseBody
		方法：
			public ResponseResult<Void> addCart(HttpSession session,
										Integer goodsId,Integer count) 
			1.创建rr对象
			2.调用业务层：addCart(cart)
			3.return rr;
	5.在product_details.jsp页面添加点击加入购物车的ajax异步提交函数
		$("#add_cart").click(function (e) {
		$.ajax({
			"url":"${pageContext.request.contextPath}/cart/addCart.do",
			"data":"goodsId="+$("#id").val()+"&count="+$("#buy-num").val(),
			"dataType":"json",
			"type":"GET",
			"success":function(obj){
				//alert(obj.state+","+obj.message);
			},
			"error":function(){//异步提交被拦截时，重定向时不会走success，会返回错误状态码
				location="${pageContext.request.contextPath}/cart/addCart.do";
			}
		});
			
*B*显示购物车
		1.值对象，store.vo
			public CartVo{
				private Integer id;
				private Integer uid;
				private String goodsId;
				private String image;
				private String title;
				private Integer price;
				private Integer count;
			}					
		2.在CartMapper中定义方法
			List<CartVo> selectCart(Integer uid) 			
		3.在CartMapper.xml中，定义select方法，完成2个表的查询
			<select id="selectCart" resultType="..vo">
				select t_cart.id as id,t_cart.uid as uid,
					   t_cart.goods_id as goodsId,
					   image,title,price,count 
				from t_cart,t_goods
				where t_cart.goods_id=t_goods.id and t_cart.uid=#{uid}
			</select>				
						
		4.控制层
			/cart/showCart.do
			请求参数：session(uid)
			请求方式：get
			响应方式：转发
			
			public String showCart(HttpSession session,ModelMap map)				
				1.调用业务层方法，返回集合list
				2.把list设置到map中
				3.return "cart";
		5.调整页面cart.jsp

	a.单行删除
		1.持久层
			在CartMapper接口中定义方法
				void deleteById(Integer id);
			在CartMapper.xml中，定义delete节点，完成删除功能
				<delete id="deleteById">
					delete from t_cart where id=#{id}
				</delete>				
		2.给业务层的接口和实现类添加方法并测试
		3.控制层
			/cart/deleteById.do
			请求参数：id
			请求方式：get
			响应方式：重定向
			
			@RequestMapping("/deleteById.do")
			//通过id删除购物车数据
			public String showCart(Integer id){
				cartService.deleteById(id);
				return "redirect:../cart/showCart.do";
			}
		4.调整页面cart.jsp和cart.js文件，添加删除的方法
	
	b.批量删除
		1.持久层
			在CartMapper接口中定义方法
				void deleteBatchById(int[] ids)
			在CartMapper.xml中，定义批量删除的语句
				//动态遍历数组标签，open--左边，separator--分隔，close--右边
				//collection--数组类型
				<delete id="deleteBatchById" parameterType="java.lang.Integer">
					delete from t_cart
					where id in
					<foreach collection="array" item="id" open="(" separator="," close=")">
						#{id}
					</foreach>
				</delete>	
		2.在业务层编写批量删除语句
		3.控制层加入批量删除方法
			@RequestMapping("/deleteBatchById.do")
			//通过id删除购物车数据
			public String showCart(int[] ids){
				cartService.deleteById(ids);
				return "redirect:../cart/showCart.do";
			}
		4.调整页面和cart.js文件的代码，实现批量删除功能
		
	c.购物车实现+-商品数量
		1.持久层
			void updateCountById(@Param("id") Integer id,@Param("count") Integer count);
			
			<update id="updateCountById">
				update t_cart set
					count=#{count}
				where id=#{id}
			</update>
		2.业务层，调用持久层方法
		3.控制层
			/cart/updateCountById.do
			请求参数：id,count
			请求方式：get
			响应方式：ResponseBody
		4.页面处理，调整cart.js文件
		
*******订单管理*********
	1.显示订单
		1.持久层(不用添加)
		2.业务层
			新建IOrderService接口，定义方法
				List<CartVo> getOrderByIds(Integer uid,Integer[] ids);
			新建OrderService接口，实现方法
				public List<CartVo> getOrderByIds(Integer uid,Integer[] ids){
					1.定义输出数据的数组
					2.调用持久层方法selectCart(),得到集合
					3.遍历集合，得到CartVo对象，获取id
					4.id和数组的id值比较，如果相同，把对象添加到orderList中
					5.return orderList
				}
		3.控制器层
			新建控制器OrderController
			添加方法public String orderConfirm(HttpSession session,Integer[] ids,ModelMap map){
				1.调用业务层方法，返回集合
				2.把集合设置到map中
				3.return "orderConfirm"
			} 	
		4.调整orderConfirm.jsp页面
			修改cart.jsp，cart.js中点击‘去结算’按钮	
			
	2.显示收货地址
		1.调用AddressService中的业务方法，返回集合，设置到map,显示页面
	3.调整点击设置默认地址按钮（参照地址管理设置默认地址）
		调整点击更多地址按钮的js函数，调整类名
			//点击设置默认地址
			$(".user_site").click(function(){
				$(this).parent().attr("class","base_select");
				$(this).parent().siblings().attr("class","base");
				$(this).hide();
				$.ajax({
					"url":"${pageContext.request.contextPath}/address/setDefault.do",
					"data":"id="+$(this).attr("id"),
					"type":"GET",
					"dataType":"json",
					"success":function(obj){
						location.reload();//刷新页面
					}			
				});
			})
	
	4.生成订单
		1.创建表t_order订单表
			id int			订单号
			uid int			购买用户
			tradeTime date 	交易时间
			created_user
			created_time
			modified_user
			modified_time
		2.创建表t_orderItem订单商品详情表
			id				
			uid					用户id
			goodsId				商品id
			image
			title
			price
			count
			paymentStatus		支付状态
			orderStatus			订单状态
			orderId				订单号
			created_user
			created_time
			modified_user
			modified_time	
		
		3.持久层
			a.新建Order,OrderItem实体类
			b.在OrderMapper接口中定义方法
				void insertOrder(Order order)			添加订单	
				void insertOrderItem(OrderItem orderItem)	添加订单详细商品
			c.在OrderMapper.xml中定义insert节点，完成sql的编写
				1	<insert id="insertOrder" parameterType="..order"
						keyProperty="id" useGeneratedKeys="true"//可以用这个办法自动生成id,以便服务层直接get得到>
						insert into t_order(uid,tradeTime) values(
							#{uid},now()--当前系统时间
						)		
					</insert>
				
				2	<insert id="insertOrderItem" parameterType="..orderItem"></insert>
				3	实现购买商品后，商品表中的数据，要做修改，在GoodsMapper接口中定义方法
					void updateNumById(@Param("id") String id,@Param("num") Integer num)
			
			d.测试持久层	
			
		4.业务层
			a.在IOrderService接口中定义方法
				void addOrder(Order order,List<CartVo> cartVos) 
			b.在OrderService类中实现方法：在订单表中插入一条数据，把所有的订单详情插入到t_orderItem表
				然后修改商品库存
					//添加订单信息和订单详情，并修改商品库存
					public void addOrder(Order order, List<CartVo> cartVos) {
						orderMapper.insertOrder(order);
						for(CartVo cartVo:cartVos){
							//设置订单详情信息
							OrderItem orderItem=new OrderItem();
							orderItem.setUid(cartVo.getUid());
							orderItem.setGoodsId(cartVo.getGoodsId());
							orderItem.setImage(cartVo.getImage());
							orderItem.setTitle(cartVo.getTitle());
							orderItem.setPrice(cartVo.getPrice());
							orderItem.setCount(cartVo.getCount());
							orderItem.setPaymentStatus(0);
							orderItem.setOrderStatus(0);
							orderItem.setId(orderId);
							orderMapper.insertOrderItem(orderItem);//插入订单详情中
							
							Goods goods=goodsMapper.selectGoodsById(Integer.parseInt(cartVo.getGoodsId()));//通过id查询该商品信息，为了得到商品数量
							//设置商品的现在数量，库存减去购买数量
							goodsMapper.updateNumById(cartVo.getGoodsId(), goods.getNum()-cartVo.getCount());
						}		
					}
			c.测试业务层
		5.控制器层
			在showOrderConfirm方法中，在session中添加属性session.setAttribute("cartVos",cartVos)
			
			/order/addOrder.do
			请求参数：uid(session)
			请求方式：post
			响应方式：转发
			public String addOrder(HttpSession session){
				Order order=new Order();
				order.setUid(this.getId());
				List<CartVo> cartVos=session.getAttribute("cartVos");
				调用业务层方法
				OrderService.addOrder(order,cartVos);
				return "payment";
			}
		6.页面	
			修改payment.html页面转为.jsp
			orderConfirm.jsp中修改点击确认并付款连接
			
*********付款*********
	1.持久层
		在OrderMapper接口中定义方法
			void updatePaymentStatusByOrderId(Integer orderId);
		在OrderMapper.xml中编写sql语句
				//update t_orderItem set paymentStatus=1 where orderId=#{orderId}
			**pl/sql:对sql语句进行编程(编写存储过程)					
				块：匿名块
				存储函数：有返回值
				存储过程	：没有返回值
				语法：
				delimiter $$
					create procedure updateItem(poid int)//方法，类型在后面，变量在前面
					begin
					update t_orderItem set paymentStatus=1 where orderId=poid //语句和参数
				end$$
		
		*调用编辑好的存储函数
		如：call updateItem(7);			
		*删除过程语法：drop procedure 过程名
	2.业务层
		在IOrderService和OrderService中编写调用持久层的方法
	3.控制器层
		在addOrder方法中，把orderId设置为session属性

		/order/payment.do
		请求参数：session
		请求方式：GET
		响应方式：转发pay_sussess.jsp	
		
		public String paysuccess(HttpSession session){}
		移除绑定的session--orderId和cartVos
	4.调整页面
		payment.jsp
		<a href="../order/paysuccess.do">确认支付</a>	
		pay_success.jsp调整头部导航栏
					
******其他模块******

**消息摘要

	**密码加密		
		1.通过消息摘要技术，对密码进行处理，避免密码‘明文’保存，管理员也不能直接看到密码
		2.原理：使用某种特定的算法（MD5加密算法）//转成32位字符串
		3.步骤：
			a.添加依赖jar包
				commons-codec 1.10
			b.在测试包中TestMD5.java中测试
			c.结论：
				同样的数据，消息摘要相同
				消息摘要相同，来源与相同的数据
	**salt 加盐（使消息摘要更加安全）
		1.定义一个字符串
			6--10 	“你喜欢编程码”
		2.把输入的数据和定义的字符串连接
		3.把连接的数一起做密码加密
		
	**把学子商城的密码进行加密处理
		1.UserService中修改密码相关代码
			注册
			登陆
			修改密码
		
		2.	在db.properties中配置salt的初始值，到spring-dao.xml中导入
			在UserService中什么全局变量
			@Value("#{dbConfig.salt}")
			private String salt;//声明加密的盐，使用配置文件配置salt,并通过sping注解导入
		3. 添加方法
				//MD5加密处理
				public String DigestUtilsSalt(String pwd){
					String newpwd=DigestUtils.md5Hex(pwd+salt);
					return newpwd;
				}
		
**文件上传//直接在控制器层调用spring-mvc的工具类
	1.导入两个jar包
		 <groupId>commons-io</groupId>			
		 <groupId>commons-fileupload</groupId>			
	2.配置spring-mvc上传的上传组件解析器
		ctrl+shift+t 打开组件解析器名字搜索
		
		<!--配置上传图片组件，id是固定的不能乱写  -->
		<bean id="multipartResolver" 
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="100000000"></property>
		<property name="defaultEncoding" value="utf-8"></property>
		</bean>
	3.添加测试文件upload.jsp
		添加测试控制器TestUploadController,实现上传文件的功能
			@RequestMapping("/showUpload.do")
			public String showUpload(){
				return "upload";
			}
			
			@RequestMapping("/doUpload.do")
			//实现上传文件的功能
			public String doUpload(MultipartFile file) throws IllegalStateException, IOException{
				file.transferTo(new File("e:/picture",file.getOriginalFilename()));//设置文件传入的路径和文件名
				return "redirect:../main/showIndex.do";
			}
		
 	4.修改personinfo.jsp头像上传组件
 	   在上传头像处添加form，在input-file组件处添加onchange="getImage()"方法
 		//上传头像
		function getImage(){
			//创建表单数据对象
			var formData=new FormData();
			//获取file节点
			var fileNode=document.getElementById("iconPic");
			formData.append("file",fileNode.files[0]);
			$.ajax({
				"url":"${pageContext.request.contextPath}/user/upload.do",
				"data":formData,
				"type":"POST",
				"dataType":"json",
				"contentType":false,//文件上传必须设置
				"processData":false,//让服务器不要处理提交的文件
				"success":function(obj){
					//实现显示图片功能
					var url=window.URL.createObjectURL(fileNode.files[0]);
					icon.src=url;//直接改写id的src属性
				}
			})
		}
 					
	5.上传头像控制器方法
		在UserController中定义方法
		@  @
		public ResponsResult<Void> upload(@RequestParam("file") MultipartFile file){
			1.file提供的方法，实现上传的功能
			2.返回rr对象，1，“上传成功”
		}
		
		
	6.保存上传的头像数据	
		a.在持久层userMapper中定义方法
			void updateImageById(@Param("image") String image,@Param("id") Integer id);
		b.在UserMapper.xml文件中定义方法
			update t_user set image=#{image} where id=#{id}
		c.写业务层，只要传递值方法同持久层
		d.写控制器层，把图片地址存入数据库
		e.页面增加读取图片地址功能
		
	7.Autowired与Resource区别
		实现功能都相同，都是自动装配依赖注入
		Autowired是spring提供的
		Resource是tomcat提供的
*****Spring-AOP********

	1.spring-AOP是一种横向逻辑的扩展，是oop的重要补充。在不改变原有业务逻辑的基础，对横切
		逻辑进行扩展
		Aspectj是一种面向切面框架
		spring-aop是对Aspectj框架的进一步封装，底层的实现原理是使用了jdk的动态代理
	2.使用时先导入jar包
		  <dependency>
			  <groupId>org.aspectj</groupId>
			  <artifactId>aspectjweaver</artifactId>
			  <version>1.8.8</version>
			</dependency>
			<dependency>
			  <groupId>org.aspectj</groupId>
			  <artifactId>aspectjweaver</artifactId>
			  <version>1.8.0</version>
			</dependency>
			<dependency>
			  <groupId>org.aspectj</groupId>
			  <artifactId>aspectjrt</artifactId>
			  <version>1.8.0</version>
			</dependency>			
	3.配置组件扫描(参照spring-service.xml)	
			<!---springAop配置-->	
				<!-- 配置组件扫描 -->
				<context:component-scan 
					base-package="store.aop" />
					
				<!-- 开启横向切面功能 -->
		 		<aop:aspectj-autoproxy/>
		
	4.使用时类要加注解
		@Component
		@Aspect
		
		方法前注解：
		a	@Before("bean(userController)")
		b	@After("bean(userController)")
		c	@AfterReturning("bean(userController)")
		d	@AfterThrowing("bean(userController)")
		e	@Around("bean(userController)")--该方法有返回对象
		
	5.名词	
		a.切点：可以执行切面逻辑方法的业务逻辑类的方法，叫切点
		b.连接点：业务逻辑类的所有方法叫连接点
		
	6.切点的定义
		a.bean定义切点
			@Around("bean(userController)||bean(orderController)")
		b.类定于切点
			@Around("within(store.controller.UserController)")
			@Around("within(store.controller.*Controller)")//可以使用通配符
		c.方法（最通用）
			@Around("execution(* store.controller.UserController.login(..))")
				*表示方法返回类型
				..表示方法参数	
			@Around("execution(* store..*Controller.*(..))")
				表示store包下*Controller类的所有方法
	
	7.项目中spring-aop的使用，用于业务层事物回滚	
		a.在spring-dao中配置bean  (ctrl+shift+t查找类，右键复制全路径)	
				<!-- 初始化bean对象，用来实现事物切面功能,并添加注解驱动 -->
				<bean id="transationManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
					<property name="dataSource" ref="dataSource"></property>
				</bean>
		 		<tx:annotation-driven transaction-manager="transationManager"/>		
		b.在I*Service服务接口类添加事物注解
			@Transactional			