******安装tomcat

systemctl stop tomcat.service关闭tomcat
systemctl restart tomcat.service重启tomcat
systemctl enable tomcat.service设置开机自动启动

下载tomcat将root复制到/usr/share/tomcat/webapps
切换到阿里云服务器打开安全组8080端口
	firewall-cmd --permanent --add-port=8080/tcp
	firewall-cmd --reload

直接启动：
	chmod +xx *.sh 	为所有.sh文件增加执行权限
	
	./startup.sh	启动tomcat

配置环境变量
	export CATALINA_HOME=/usr/local/apache-tomcat-7.0.67
	export PATH=$CATALINA_HOME/bin:$PATH


**安装mysql
	oracle收购后产生分支	
	oracle mysql
	MariaDB

1.安装mariadb
	yum install mariadb-server mariadb   //安装服务器和客户端

2.启动mariadb
	systemctl start mariadb.service
3.检查
	ps -A|grep mysql
4.关闭重启
	systemctl stop mariadb.service
	systemctl restart mariadb.service

5.解决中文乱码问题
    a	在服务器linux命令台中输入
	   mysql -uroot -p****
	密码为空则**号处不写，登陆到服务器的mysql中
	修改密码（管理员身份）：set password for 用户名@localhost=password('			新密码');
    b	查看当前编码
	   show variables like 'char%'
	如果服务器的编码是:latin1则是拉丁编码，需要修改为utf8
    c	解决方案：
	1.set character_set_server=utf8
	  set character_set_database=utf8
          直接设置需要改动的编码为需要的格式，但是这个办法重启后要重设
	2.修改配置文件(不同版本修改的不一样)
		cd /etc/my.cnf
		在[mysqld]中添加
			character_set_server=utf8
	   	在[mysql]中添加
			default-character-set=utf8
		重启systemctl restart mariadb.service
		检查show variables like 'char%'


****从pc导出数据到服务器

1.导出现有数据库到SQL
	a.	在ps本地mysql数据库输入指令：（在linux控制台p后面**为密码）
		mysqldump -uroot -p*** tedu_store>tedu_store.sql
		mysqldump+用户名+密码+数据库+">"符号+目标文件
		
		或者（window系统）
		进入cmd
		  进入mysql-bin路径中，然后就可以使用mysqldump指令了
		  如e:mysql\bin(具体位置看属性)

	b.	把bin中的文件tedu_store.sql传输到服务器的root下
	c.	进入服务器的mysql
		创建新表tedu_store并使用，使用数据库后
		使用命令source tedu_store.sql执行建表语句
		建表完成后检查数据是否存在

*********项目的迁移
1.把本地项目打包成.war格式(使用eclipse导出)
2.查看服务器tomcat-webapps地址(默认/usr/share/tomcat/webapps)
3.使用工具或sftp把.war格式的文件发送到服务器的-webapp中
4.重启tomcat


****其他指令******
r:read 读取权限
w:write 写入权限
x:execute 执行权限	
修改当前用户权限: chmod -x abc	---把abc的执行权限取出(进不去了)
		  chmod +x abc	---把abc的添加执行权限(进不去了)

用数字代替字符权限
---  0
--x  1
-w-  2
-wxx 3
r--  4
r-x  5
rw-  6
rwx  7	


*****Nginx解决高并发******

利用Nginx与Tomcat组合使用，搭建反向代理集群

**常见web Server

开源软件：
	-Nginx
	-Apache
	-Apache Tomcat(java ee)
	-Jetty (java ee)
商业软件：
	-Microsoft IIS
	-IBM Webspare(jave ee)
	-Oracle Weblogic(java ee)

java EE web服务器也称为java Web容器

**使用Nginx**

1.*yum安装*
	安装： yum -y install nginx
	启动： systemctl start nginx.service
	关闭/重启：systemctl stop/restart nginx.service
	设置开机启动：systemctl enable nginx.service
	检查：ps -A|grep nginx
	测试：http://ip地址
2.*源码编译安装*
  	a.下载源代码
		wget http://nginx.org/download/nginx-1.12.2.tar.gz
	b.创建nginx用户
		useradd nginx
	c.创建nginx的目标目录
		mkdir/usr/local/nginx
	d.释放编译
	    1释放文件	tar -zxf nginx-1.12.2.tar.gz
	    2进入文件夹	cd nginx-1.12.2
	    3配置	./configure --prefix=/usr/local/nginx --user=nginx \
			--with-http_ssl_module
	    4编译   make
	    5安装   make install
	    6启动   nginx -c /usr/local/conf/nginx.conf   (在80端口打开的前								提下)
				(firewall -cmd --permanent --add-port=80/tcp
				firewall -cm --reload)
	    7检查   ps -A|grep nginx			
	    8测试   http://ip	
	e.nginx功能是通过配置文件完成的nginx/conf/nginx.conf
		yum安装版本 /etc/nginx/nginx.conf
	f.nginx配置文件结构
		通过配置参数
		http{
		     http 协议通用参数
		     server{
			虚拟机配置参数
		     }			
		}
          	
		1.worker_processes 建议按照处理器(几核)数量进行设置
		2.events{} 一个进程允许的线程数(按内存大小配置)
		3.http通用参数
			--contenttype映射文件
				include     mime.types;
				default_type  application/octet-stream;
			---log_format main/access_log  日志文件
			---keepalive在指定http/1.1协议时候的服务器端的连接等				待时间
			---gzip on打开服务器响应的gzip压缩传输，可以节省流量					，但会占服务器cpu，可能产生不兼容

		4.配置文件修改后要测试：nginx -t -c 								/usr/local/nginx/conf/nginx.conf
		5.热更新配置文件：nginx -s reload


3.*虚拟主机*

   在一个web服务器上通过软件模拟多态web服务器，其中每个虚拟的web服务器称为一个虚拟主机，虚拟主机的好处是可以充分复用同一个web服务器，对于用户来说，用户感觉是多个网站。nginx配置文件中每个server{}模块对应一个虚拟主机。
   虚拟主机有3种：1.基于域名的虚拟主机--需要为服务器指定多个域名
		  2.基于ip虚拟主机--需要为服务器指定多个ip地址
		  3.基于端口的虚拟主机--绑定到服务器的多个端口，默认80端口只			有一个，使用其他端口号需要记忆端口，用户体验差

4.hosts--window主机代理文件配置
      a	打开该文件在末尾添加
	192.168.1.1  admin
	主机ip	     代理名称
	
      b	测试：先ping 192.168.1.1
	   配置后ping admin	
      c	用#号注释后发现不通了









